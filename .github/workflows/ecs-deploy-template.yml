name: Deploy to ECS

on:
  workflow_call:
    inputs:
      DOCKERFILE_LOCATION:
        required: true
        type: string
      AWS_ECR_REPOSITORY:
        required: true
        type: string
      AWS_ECS_CLUSTER_NAME:
        required: true
        type: string
      AWS_ECS_SERVICE_NAME:
        required: true
        type: string
      AWS_ECS_TASK_DEFINITION_NAME:
        required: true
        type: string
      AWS_ECS_CONTAINER_NAME:
        required: true
        type: string
    secrets:
      AWS_ROLE:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        region: [ us-east-1 ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ matrix.region }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2.0.1
        id: login-ecr

      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git show -s --pretty=format:%h)" >> $GITHUB_OUTPUT

      - name: Build and Push image to Amazon ECR
        id: build-and-tag-docker-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.AWS_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ steps.vars.outputs.sha_short }}
        run: |
          docker build --file ${{ inputs.DOCKERFILE_LOCATION }} --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ inputs.AWS_ECR_REPOSITORY }}:${{ steps.vars.outputs.sha_short }}" >> $GITHUB_OUTPUT

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
          --task-definition ${{ inputs.AWS_ECS_TASK_DEFINITION_NAME }} \
          --query taskDefinition \
          --output json > taskDefinition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: update-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1.6.1
        with:
          task-definition: taskDefinition.json
          container-name: ${{ inputs.AWS_ECS_CONTAINER_NAME }}
          image: ${{ steps.build-and-tag-docker-image.outputs.IMAGE_URI }}

      - name: Deploy Amazon ECS task definition
        id: deploy-ecs
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2.2.0
        with:
          task-definition: ${{ steps.update-task-def.outputs.task-definition }}
          service: ${{ inputs.AWS_ECS_SERVICE_NAME }}
          cluster: ${{ inputs.AWS_ECS_CLUSTER_NAME }}
          wait-for-service-stability: true
